; vim: set ts=4 sw=4 sts=4 tw=78 noet nolist :
; this file is install/generic/.gitconfig

[include]
;	path = ~/git/misc/install/generic/.gitconfig -- this file!
	; this file is NEVER committed to git, as it could contain credentials or
	; machine-specific configurations.
	path = ~/.gitconfig.local

[user]
	name = Karen Etheridge
	useConfigOnly = true	; don't try to guess creds if missing
	email = ether@cpan.org
[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	ui = true
[color "diff"]
[push]
	default = upstream
	; default = simple
	followTags = true	; automatically push annotated tags that are reachable
[merge]
	renamelimit = 1658
	ff = false
	conflictstyle = diff3
[rebase]
	autostash = true
	missingCommitsCheck = warn
	stat = true
	autoSquash = true
[pull]
	autostash = true
[branch]
	autosetupmerge = true
	autosetuprebase = always
[rerere]
	enabled = true
	autoupdate = true
[gc]
	rerereUnresolved = 2	; prune unresolved conflicts older than N days; default 15
	rerereResolved = 14		; prune resolved conflicts older than N days; default 60
	reflogExpire = 365		; days; default: 90
	reflogExpireUnreachable = 365	; days; default: 30
[commit]
	verbose = 2				; show diff being committed, and diff of unstaged files

[diff]
	algorithm = histogram	; a bit better than patience
	compactionHeuristic = true
	indentHeuristic = true
[diff "gz"]
	textconv = gzcat
	cachetextconv = true
	binary = true
[diff "tgz"]
	textconv = tar -xvzO -f
	cachetextconv = true
	binary = true
[diff "zip"]
	textconv = unzip -c -a

;[column]
;	branch = auto

[core]
	excludesFile = ~/.gitexclude
	# indent-with-non-tab omitted - it makes diffs look ugly
	whitespace = space-before-tab,tab-in-indent,trailing-space
	attributesfile = ~/.gitattributes
	# not needed if we are at git 2.30.2
	# symlinks = false # https://github.blog/2021-03-09-git-clone-vulnerability-announced/

[init]
	# it seems that 2.37.1 (ish) now sets defaultBranch
	defaultBranch = master	# let me switch to main for each repository individually

# this cannot be global, if the file does not exist?
#[blame]
#	ignoreRevsFile = .git-blame-ignore-revs
[interactive]
	singlekey = true

[log]
	date = iso8601
	follow = true	; as if we did 'git log --follow', when just one file

[pretty]
	# for all format strings, see 'man git-log' or 'git help log' under 'PRETTY FORMATS'
	# default format is git reflog --format='%C(auto)%h%d %gd: %gs'
	# %h - abbreviated commit hash
	# %d - ref names
	# %gd - reflog selector, e.g., refs/stash@{1}
	# %gs - reflog subject
	# use --date=format:'%Y-%m-%d %H:%m' to change the reflog date format.
	reflog = %C(auto)%h %gd%d %gs %C(240)%as%C(auto)

[pager]
	log = less '+/^([*] +)?commit '
	## esc-u disables highlighting just for this search.
	#log = less -p'^([*] +)?commit '
	logone = less
	#diff = less -G '+/^([*] )?diff '		# TODO
	#stashes = less
	#stash = less -F
	#diff = less -F #-p'^diff '
	#stash = less -ciMR  # 'git wip' ends up in the pager and I don't like it
	stashes = less
	#stash = less -F	# when popping, we want the dropped sha to appear in scrollback.

[github]
	user = karenetheridge
	# see also .gitconfig.local
[ghi]
	token = !security find-internet-password -a karenetheridge -s github.com -l 'ghi token' -w

[alias]
	rc = rebase --continue
	wip = stash save --keep-index 'wip'
	fetchall = fetch --all --tags --prune
	squash = commit -m"squash! $@"	# see also "sq" and "fixup" shell functions
	# https://stackoverflow.com/questions/37583800/how-can-i-create-a-git-alias-to-delete-a-tag-remotely
	deltag = !sh -c 'git tag -d $1 && git push origin :refs/tags/$1' -
	delbranch = push origin --delete
	m = merge --no-ff
	mff = merge --ff-only
	uhub = hub --remote upstream
	rebasemaster = !git rebase -i $(git merge-base master HEAD)
	log = log --notes --pretty=fuller
	logone = log --graph --oneline --decorate --date=short --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%C(red bold)%d %Creset%s'
	reflogs = reflog --notes --pretty='%cd %h %gd %gs'
	stashes = stash list --pretty='%Cred%cd %Cblue%h %Cgreen%gd %Creset%gs'
	; from http://stackoverflow.com/questions/3065650/whats-the-simplest-way-to-git-a-list-of-conflicted-files
	conf = diff --name-only --diff-filter=U
	cherry-pick = cherry-pick --ff
	git = !git		# turns "git git @_" into "git @_", or "git @_" -> "@_"
	branchname = rev-parse --abbrev-ref HEAD
	addconf = !git add $(git conf)
	; from https://peter.eisentraut.org/blog/2014/11/04/checking-whitespace-with-git/
	check-whitespace = !git diff-tree --check $(git hash-object -t tree /dev/null) HEAD
	; from http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
	ls-aliases = !git config -l | grep alias | cut -c 7-
	pull-url = "!echo $(git remote get-url --push origin | perl -p -e's{^(?:git@|https?//)([^:/]*)[:/](.+?)(\\.git)?$}{https://$1/$2/pull/new/}')$(git branchname)"
	pr = "!git push --force-with-lease -u origin $(git branchname); echo $(git pull-url); open $(git pull-url)"
	# files that changed in the commit
	df = !sh -c 'git diff-tree --no-commit-id --name-only -r "${1-HEAD}"'
	pushf = push --force-with-lease
	chp = checkout -p
	upsub = "!git submodule update --init --recursive $*; git submodule update --remote $*"
	c = commit -v -v
	bleadrelease = git describe --abbrev=0 --tags
	# all commits, in ascending chronological order, since the last blead release
	bleadcommits = "!git log --graph --oneline --decorate --date=short --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%C(red bold)%d %Creset%s' $(git bleadrelease)~1..HEAD | perl -wE'print reverse <>' | perl -wne'm/^(\\W+)+ /g; my $str = (substr($_, 0, pos()) =~ tr{/\\\\}{\\\\/}r).substr($_, pos()); print $str'"
	common = !git merge-base $(git rev-parse --abbrev-ref HEAD)  # common ancestor between current branch and provided branch or commit
	# it seems that 2.37.1 (ish) now sets defaultBranch
	defaultbranch = "!defaultbranch=$(git config init.defaultBranch); echo ${defaultbranch:-master}"
	rbm = "!git fetchall; git rebase -i origin/$(git defaultbranch)"
	firstcommit = !git rev-list HEAD | tail -n 1
	isdirty = diff --quiet --stat # returns 0 if the file is clean, 1 if it is dirty
	# all commits from main branch to HEAD, in commit order
	commits = "!git log -p --decorate --notes --pretty=fuller --stat --reverse origin/$(git defaultbranch)..HEAD"
	rb = git rev-parse --abbrev-ref --symbolic-full-name @{u}
	rl = reflog --format=reflog --date=format:'%Y-%m-%d %H:%M:%S'
	branches = git branch --sort=-committerdate

	# "Note that during git rebase and git pull --rebase, ours and theirs
	# may appear swapped; --ours gives the version from the branch the
	# changes are rebased onto, while --theirs gives the version from the
	# branch that holds your work that is being rebased."

	# when rebasing, this will keep the original version of everything in
	# conflict (the first of the three diffs), not the conflicting changes
	# coming in from the rebase, cherry-pick or stash application
	keepmine = "!git checkout --theirs -- .; git add $(git conf)"

	# when rebasing, this will discard the original version of everything,
	# preferring the conflicting changes coming in from the rebase,
	# cherry-pick or stash application (the third of the three diffs)
	keeptheirs = "!git checkout --ours -- .; git add $(git conf)"

	# tag a working checkpoint, to ensure reflog does not drop it prematurely
	checkpoint = "!git tag -m\"checkpoint: $(git branchname) $(date +'%Y-%m-%dT%T')\" \"checkpoint-$(git branchname)-$(date +'%Y-%m-%dT%H%M%S')\""

; for automatic translation of URLs
[url "git@github.com:"]
	insteadOf = http://github.com/
	insteadOf = https://github.com/
	insteadOf = git://github.com/

[url "p5sagit@git.shadowcat.co.uk:"]
	insteadOf = git://git.shadowcat.co.uk/p5sagit/
	insteadOf = git://git.shadowcat.co.uk:p5sagit/

[url "gitmo@git.shadowcat.co.uk:"]
	insteadOf = git://git.shadowcat.co.uk/gitmo/
	insteadOf = git://git.shadowcat.co.uk:gitmo/
	insteadOf = git://git.moose.perl.org/

[url "catagits@git.shadowcat.co.uk:"]
	insteadOf = git://git.shadowcat.co.uk/catagits/
	insteadOf = git://git.shadowcat.co.uk:catagits/

[url "dbsrgits@git.shadowcat.co.uk:"]
	insteadOf = git://git.shadowcat.co.uk/dbsrgits/
	insteadOf = git://git.shadowcat.co.uk:dbsrgits/

[url "scpubgit@git.shadowcat.co.uk:"]
	insteadOf = git://git.shadowcat.co.uk/scpubgit/
	insteadOf = git://git.shadowcat.co.uk:scpubgit/

# https://superuser.com/questions/1702754/windows-ssh-client-how-to-fix-no-matching-cipher-found

; from https://gist.github.com/piscisaureus/3342247
; copy one of these to your .git/config as needed
;[remote "origin"]
;	fetch = +refs/pull/*/head:refs/remotes/origin/pull/*
;[remote "upstream"]
;	fetch = +refs/pull/*/head:refs/remotes/upstream/pull/*
