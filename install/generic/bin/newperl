#!/usr/bin/env perl

use strict;
use warnings;

# adapted from https://gist.github.com/dagolden/5171336
# 2013-03-15

my $start_time = time();

my $as = shift
    or die "Usage: $0 <perl-version-alias> [listed version to install]";
my @args = @ARGV;
 
# trailing "t" means do threads
my @threads = ( $as =~ /t$/ ) ? (qw/-D usethreads/) : ();

# trailing "no." means . is excluded from @INC (5.25.7+)
# and this option defaults to true anyway for 5.25.11+
my @no_dot_inc = ( $as =~ /no\.$/ ) ? (qw/-Ddefault_inc_excludes_dot/) : ();
 
$as =~ s/^5\.//;
my $perl = "5.$as";
$perl =~ s/t$//; # strip trailing "t" if any
$perl =~ s/no\.$//; # strip trailing "no." if any
my $lib = $as . '@std';

my @no_man = qw/-D man1dir=none -D man3dir=none/;

run( qw/perlbrew self-upgrade/ );
# note: this is important - see http://blogs.perl.org/users/atoomic/2018/10/using-perlbrew-after-macos-mojave-1014-update.html
run( qw/yes | perlbrew install-patchperl/ );
run( qw/yes | perlbrew install-cpanm/ );

# install perl and lock it down

$perl = '' if grep qr{^http}, @args;

# DB_File on OSX 10.13 is incompatible - when the build fails,
# sudo port install db48,
# and then add these lines to cpan/DB_File/config.in and rebuild:
# INCLUDE = /opt/local/include/db48
# LIB = /opt/local/lib/db48
# see also cpan RT#125238, perl RT#133280.
run_or_die( qw/perlbrew install -j 9 --as/, $as, $perl, @threads, @no_dot_inc, @no_man, @args );
run_or_die( qw/chmod -R a-w/, "$ENV{HOME}/perl5/perlbrew/perls/$as" );

# give us a local::lib for installing things
run_or_die( qw/perlbrew lib create/, $lib );

my $elapsed_time = time() - $start_time;
my ($min, $sec) = (int($elapsed_time / 60), $elapsed_time % 60);
print "done (elapsed time: ${min}m ${sec}s). now you should run:\n";
print "perlbrew use $as\@std; perlmodules\n";
system(say => 'done.');
system(say => "elapsed time: ${min} minutes, ${sec} seconds.");


sub run_or_die {
  my $cmd = join(' ', @_);
  print "Running: $cmd\n";
  system $cmd;
  die "$cmd returned exit code $?: stopping" if $?;
  return $?
}

sub run {
  my $cmd = join(' ', @_);
  print "Running: $cmd\n";
  system $cmd;
  warn "$cmd returned exit code $?" if $?;
  return $?
}

